pipeline {
    agent any

    environment {
        BASE64_SA_JSON = credentials('google-private-key')
        IMAGE_NAME = 'staging'
        TAG = 'staging'
        PORT = '9999'
        INTERNAL_PORT = '3000'
        NETWORK = 'docker-stack_default'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout Infra Repo') {
            steps {
                git(
                    credentialsId: 'github-token', // <-- store PAT in Jenkins credentials
                    url: 'https://token@github.com/username/repo.git',
                    branch: 'staging'
                )
            }
        }


        stage('Validate Env Vars') {
            steps {
                script {
                    def requiredVars = [
                        "NEXT_PUBLIC_SITE_NAME", "NEXT_PUBLIC_DOMAIN_URL", "NEXT_PUBLIC_BE_API_URL",
                        "NEXTAUTH_SECRET", "NEXTAUTH_URL", "BASE64_SA_JSON",
                        "NEXT_PUBLIC_CUSTOMER_SHEETS_ID", "NEXT_PUBLIC_WS_URL",
                        "NEXT_PUBLIC_AUTO_TRANSFER_DURATION", "NEXT_PUBLIC_REFRESH_TIME", "NEXT_PUBLIC_FORMAT_DATE_TIME"
                    ]

                    requiredVars.each { var ->
                        if (!env."${var}") {
                            error "Missing required environment variable: ${var}"
                        }
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh '''#!/bin/bash
                        docker build \
                          -f /opt/ci/nextjs-deploy/Dockerfile.stage-production \
                          --build-arg NEXT_PUBLIC_SITE_NAME="$NEXT_PUBLIC_SITE_NAME" \
                          --build-arg NEXT_PUBLIC_DOMAIN_URL="$NEXT_PUBLIC_DOMAIN_URL" \
                          --build-arg NEXT_PUBLIC_BE_API_URL="$NEXT_PUBLIC_BE_API_URL" \
                          --build-arg NEXTAUTH_SECRET="$NEXTAUTH_SECRET" \
                          --build-arg NEXTAUTH_URL="$NEXTAUTH_URL" \
                          --build-arg BASE64_SA_JSON="$BASE64_SA_JSON" \
                          --build-arg NEXT_PUBLIC_CUSTOMER_SHEETS_ID="$NEXT_PUBLIC_CUSTOMER_SHEETS_ID" \
                          --build-arg NEXT_PUBLIC_WS_URL="$NEXT_PUBLIC_WS_URL" \
                          --build-arg NEXT_PUBLIC_AUTO_TRANSFER_DURATION="$NEXT_PUBLIC_AUTO_TRANSFER_DURATION" \
                          --build-arg NEXT_PUBLIC_REFRESH_TIME="$NEXT_PUBLIC_REFRESH_TIME" \
                          --build-arg NEXT_PUBLIC_FORMAT_DATE_TIME="$NEXT_PUBLIC_FORMAT_DATE_TIME" \
                          -t $IMAGE_NAME:$TAG .
                    '''
                }
            }
        }

        stage('Stop & Remove Old Container') {
            steps {
                script {
                    sh '''#!/bin/bash
                        docker stop $IMAGE_NAME || true
                        docker rm $IMAGE_NAME || true
                    '''
                }
            }
        }

        stage('Run New Container') {
            steps {
                script {
                    sh '''#!/bin/bash
                        docker run -d \
                          --name $IMAGE_NAME \
                          --network $NETWORK \
                          -p $PORT:$INTERNAL_PORT \
                          -e NEXT_PUBLIC_SITE_NAME="$NEXT_PUBLIC_SITE_NAME" \
                          -e NEXT_PUBLIC_DOMAIN_URL="$NEXT_PUBLIC_DOMAIN_URL" \
                          -e NEXT_PUBLIC_BE_API_URL="$NEXT_PUBLIC_BE_API_URL" \
                          -e NEXTAUTH_SECRET="$NEXTAUTH_SECRET" \
                          -e NEXTAUTH_URL="$NEXTAUTH_URL" \
                          -e BASE64_SA_JSON="$BASE64_SA_JSON" \
                          -e NEXT_PUBLIC_CUSTOMER_SHEETS_ID="$NEXT_PUBLIC_CUSTOMER_SHEETS_ID" \
                          -e NEXT_PUBLIC_WS_URL="$NEXT_PUBLIC_WS_URL" \
                          -e NEXT_PUBLIC_AUTO_TRANSFER_DURATION="$NEXT_PUBLIC_AUTO_TRANSFER_DURATION" \
                          -e NEXT_PUBLIC_REFRESH_TIME="$NEXT_PUBLIC_REFRESH_TIME" \
                          -e NEXT_PUBLIC_FORMAT_DATE_TIME="$NEXT_PUBLIC_FORMAT_DATE_TIME" \
                          $IMAGE_NAME:$TAG
                    '''
                }
            }
        }

        stage('Cleanup Old Images') {
            steps {
                script {
                    // Remove dangling images
                    sh 'docker image prune -f'

                    // Remove all but the latest tagged image
                    sh '''#!/bin/bash
                        docker images --format '{{.Repository}}:{{.Tag}} {{.ID}}' | \
                        grep "$IMAGE_NAME:$TAG" | \
                        awk '{print $2}' | \
                        tail -n +2 | \
                        xargs -r docker rmi
                    '''
                }
            }
        }
    }
}
